#ifndef CUSTOM_DECLARATIONS
#define CUSTOM_DECLARATIONS

// For the call stack of functions
.type CallStack = [head: Transfer, tail: CallStack]
.decl depth(stack: CallStack, num: number)
#define MAX_DEPTH 3                                 // keep this here so that every file gets it
#define STACK_OVERFLOW "<so>"                       // keep this here so that every file gets it

// Checking validitiy of a stack
.decl validStack(stack: CallStack)                     // stack by itself
.decl validBlkStack(id_block: Block, stack: CallStack) // stack with a block
.decl validIdStack(id: SSA, stack: CallStack)          // stack with a statement

// For taint flow depending on guards
.decl argTaint(id_block: Block, stack: CallStack)               // taints of arguments/msg.sender/msg.value
.decl notGuard(id: SSA, id_block: Block, stack: CallStack)      // can't use guard, because datalog doesn't like negation loops
.decl noMsgSenderLocal(id: SSA, stack: CallStack)               // can't use taintedLocal, because datalog doesn't like negation loops
.decl noMsgSenderGlobal(field: Name, id: SSA, stack: CallStack) // can't use taintedLocal, because datalog doesn't like negation loops

// For guards in global vars across block boundaries
.decl noMsgSenderGlobalBlkStart(field: Name,
                                id_block: Block,
                                stack: CallStack) // at the start of a block
.decl noMsgSenderGlobalBlkEnd(field: Name,
                              id_block: Block,
                              stack: CallStack)   // at the end of a block

// Taint tracking
.decl taintedLocal(id: SSA, id_block: Block, src: Name, stack: CallStack) // local vars and args
.decl taintedGlobal(field: Name, id: SSA, src: Name, stack: CallStack)    // global vars within a function
.decl permaTainted(field: Name)                                           // global vars being tainted forever

// Statement ordering
.decl firstStmt(id: SSA, id_block: Block)    // first statement of a block
.decl lastStmt(id: SSA, id_block: Block)     // last statement of a block
.decl notFirstStmt(id: SSA, id_block: Block) // negation of firstStmt for convenience
.decl notLastStmt(id: SSA, id_block: Block)  // negation of lastStmt for convenience

// For global var taints across block boundaries
.decl taintedGlobalBlkStart(field: Name,
                            id_block: Block,
                            src: Name,
                            stack: CallStack) // at the start of a block
.decl taintedGlobalBlkEnd(field: Name,
                          id_block: Block,
                          src: Name,
                          stack: CallStack)   // at the end of a block

// For tracking guards/taints across function returns
.decl blockFollows(id_block_next: Block, id_block_prev: Block)
.decl notEmptyBlock(id_block: Block)                           // can't use emptyBlock, because datalog uses existence
.decl jumpFollows(id_next: Transfer, id_prev: Transfer)        // basically funcFollows

.decl canJump(stack: CallStack, tail: CallStack, id_jump: Transfer)
.decl canReturnBlk(stack: CallStack, tail: CallStack, id_block: Block, id_jump: Transfer)
.decl canReturnId(stack: CallStack, tail: CallStack, id: SSA, id_jump: Transfer)

#endif
