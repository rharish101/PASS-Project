#ifndef GUARDS
#define GUARDS

#include "declarations.dl"

// Base guard definition
notGuard(id, stack) :- (const(id, "True"); const(id, "False")),
                       validIdStack(id, stack).
notGuard(id, stack) :- compOp(op),
                       msgSender(id_sender),
                       taintedLocal(id_other, blk, _, stack),
                       !msgSender(id_other),
                       blockStmt(blk, id),
                       (bop(id, id_sender, id_other, op);
                        bop(id, id_other, id_sender, op)).
notGuard(id, stack) :- bop(id, id_lhs, id_rhs, op),
                       compOp(op),
                       !msgSender(id_lhs),
                       !msgSender(id_rhs),
                       validIdStack(id, stack).

// Combination of guards within a require/if-else
notGuard(id, stack) :- assign(id, id_var),
                       notGuard(id_var, stack).
notGuard(id, stack) :- uop(id, id_var, op),
                       boolOp(op),
                       notGuard(id_var, stack).
notGuard(id, stack) :- boolOp(op),
                       notGuard(id_var, stack),
                       taintedLocal(id_var, blk, _, stack),
                       blockStmt(blk, id),
                       (bop(id, id_var, _, op); bop(id, _, id_var, op)).
notGuard(id, stack) :- bop(id, id_lhs, id_rhs, op),
                       boolOp(op),
                       notGuard(id_lhs, stack),
                       notGuard(id_rhs, stack).

// For argument combinations
notGuard(id, stack) :- transferArgument(id_transfer, id_src, idx),
                       notGuard(id_src, stack),
                       argument(id, blk, idx),
                       (goto(id_transfer, _, blk);
                        branch(id_transfer, _, _, blk, _, _);
                        branch(_, id_transfer, _, _, blk, _)).

#endif
