#ifndef GUARDS
#define GUARDS

#include "declarations.dl"

// Base guard definition
notGuard(id, blk, stack) :- noMsgSender(id, stack),
                            validBlkStack(blk, stack).
notGuard(id, blk, stack) :- taintedLocal(id, blk, src, stack),
                            (src = "cond"; src = "perm").

// Base case
noMsgSender(id, nil) :- argument(id, blk, _), function(blk, _).
noMsgSender(id, stack) :- validIdStack(id, stack),
                          (const(id, _);
                           builtinVariable(id, name), name != "SENDER").

// For expressions
noMsgSender(id, stack) :- noMsgSender(id_var, stack),
                          (assign(id, id_var);
                           uop(id, id_var, _)).
noMsgSender(id, stack) :- bop(id, id_lhs, id_rhs, _),
                          noMsgSender(id_lhs, stack),
                          noMsgSender(id_rhs, stack).

// For argument combinations
noMsgSender(id, stack) :- transferArgument(id_transfer, id_src, idx),
                          noMsgSender(id_src, stack),
                          argument(id, blk, idx),
                          (goto(id_transfer, _, blk);
                           branch(id_transfer, _, _, blk, _, _);
                           branch(_, id_transfer, _, _, blk, _)).

// For loads
// TODO: Handle globals properly
noMsgSender(id, stack) :- load(id, _), validIdStack(id, stack).

#endif
