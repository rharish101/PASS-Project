#ifndef LOCAL_TAINTS
#define LOCAL_TAINTS

#include "../declarations.dl"

// For untrusted inputs, msg.sender, and msg.value
taintedLocal(id, blk, "cond", nil) :- argument(id, blk, _), function(blk, _).
taintedLocal(id, blk, "cond", nil) :- msgValue(id), argTaint(blk, nil).
taintedLocal(id, blk, "send", nil) :- msgSender(id), argTaint(blk, nil).

// For expressions
taintedLocal(id, blk, src, stack) :- taintedLocal(id_var, blk, src, stack),
                                     (assign(id, id_var);
                                      uop(id, id_var, _);
                                      bop(id, id_var, _, _);
                                      bop(id, _, id_var, _)).

// For argument combinations
taintedLocal(id, blk, src, stack) :- transferArgument(id_transfer, id_src, idx),
                                     taintedLocal(id_src, blk_src, src, stack),
                                     argument(id, blk, idx),
                                     (!notEmptyBlock(blk_src)
                                      ;
                                      lastStmt(id_destroy, blk_src),
                                      !selfdestruct(id_destroy, _)),
                                     (goto(id_transfer, blk_src, blk);
                                      branch(id_transfer, _, blk_src, blk, _, _);
                                      branch(_, id_transfer, blk_src, _, blk, _)).

// For taints through loads
taintedLocal(id, blk, src, stack) :- load(id, field),
                                     blockStmt(blk, id),
                                     taintedGlobal(field, id, src, stack).

// Pass taints around blocks
taintedLocal(id, blk, src, stack) :- taintedLocal(id, blk_src, src, stack),
                                     (lastStmt(id_destroy, blk_src),
                                      !selfdestruct(id_destroy, _)
                                      ;
                                      !notEmptyBlock(blk_src)),
                                     (goto(id_transfer, blk_src, blk);
                                      branch(id_transfer, _, blk_src, blk, _, _);
                                      branch(_, id_transfer, blk_src, _, blk, _);
                                      jump(_, blk_src, _, blk)),
                                     (src != "perm", argTaint(blk, stack);
                                      src = "perm").

#endif
