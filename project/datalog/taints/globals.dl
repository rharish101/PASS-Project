#ifndef GLOBAL_TAINTS
#define GLOBAL_TAINTS

#include "../declarations.dl"

// taintedGlobal rules for block start/end
taintedGlobal(field, id, src, stack) :- taintedGlobalBlkStart(field, blk, src, stack),
                                        firstStmt(id, blk),
                                        !store(id, field, _).
taintedGlobalBlkEnd(field, blk, src, stack) :- taintedGlobal(field, id, src, stack),
                                               lastStmt(id, blk).
taintedGlobalBlkEnd(field, blk, src, stack) :- taintedGlobalBlkStart(field, blk, src, stack),
                                               !notEmptyBlock(blk).

// Apply taintedGlobal when storing
taintedGlobal(field, id, src, stack) :- store(id, field, id_var),
                                        taintedLocal(id_var, blk, src, stack),
                                        blockStmt(blk, id).

// Apply perma-taint when loading perma-tainted globals
taintedGlobal(field, id, "perm", stack) :- permaTainted(field),
                                           firstStmt(id, blk),
                                           function(blk, _),
                                           depth(stack, num),
                                           num < 3.

// Pass taintedGlobal b/w statements
taintedGlobal(field, id, src, stack) :- taintedGlobal(field, id_src, src, stack),
                                        follows(id, id_src),
                                        !store(id, field, _).

// Pass taintedGlobal for each id for transfers
taintedGlobalBlkStart(field, blk, "perm", stack) :- goto(_, blk_src, blk),
                                                    taintedGlobalBlkEnd(field, blk_src, "perm", stack).
taintedGlobalBlkStart(field, blk, "perm", stack) :- branch(_, __, blk_src, blk, ___, ____),
                                                    taintedGlobalBlkEnd(field, blk_src, "perm", stack).
taintedGlobalBlkStart(field, blk, "perm", stack) :- branch(_, __, blk_src, ___, blk, ____),
                                                    taintedGlobalBlkEnd(field, blk_src, "perm", stack).
taintedGlobalBlkStart(field, blk, "cond", stack) :- goto(_, blk_src, blk),
                                                    taintedGlobalBlkEnd(field, blk_src, "cond", stack),
                                                    argTaint(blk, stack).
taintedGlobalBlkStart(field, blk, "cond", stack) :- branch(_, __, blk_src, blk, ___, ____),
                                                    taintedGlobalBlkEnd(field, blk_src, "cond", stack),
                                                    argTaint(blk, stack).
taintedGlobalBlkStart(field, blk, "cond", stack) :- branch(_, __, blk_src, ___, blk, ____),
                                                    taintedGlobalBlkEnd(field, blk_src, "cond", stack),
                                                    argTaint(blk, stack).

// Save perma-taints when returning
permaTainted(field) :- return(_, blk),
                       taintedGlobalBlkEnd(field, blk, "perm", nil).
permaTainted(field) :- return(_, blk),
                       taintedGlobalBlkEnd(field, blk, "cond", nil),
                       argTaint(blk, nil).

#endif
