#ifndef FUNC_RETURN
#define FUNC_RETURN

#include "../declarations.dl"

// For reducing code duplication
canReturnBlk(stack, stack_src, blk, id_jump) :- (stack_src = [id_jump, stack]
                                                 ;
                                                 stack_src = [STACK_OVERFLOW, stack]
                                                 ;
                                                 stack = stack_src,
                                                 stack_src = [STACK_OVERFLOW, tail]),
                                                validBlkStack(blk, stack),
                                                jump(id_jump, _, _, _).
canReturnId(stack, stack_src, id, id_jump) :- (stack_src = [id_jump, stack]
                                               ;
                                               stack_src = [STACK_OVERFLOW, stack]
                                               ;
                                               stack = stack_src,
                                               stack_src = [STACK_OVERFLOW, tail]),
                                              validIdStack(id, stack),
                                              jump(id_jump, _, _, _).

// Getting guards
argTaint(blk, stack) :- return(_, blk_src),
                        jump(id_jump, _, blk_fn, blk),
                        blockFollows(blk_src, blk_fn),
                        (lastStmt(id_last, blk_src), !selfdestruct(id_last, _);
                         !notEmptyBlock(blk_src)),
                        argTaint(blk_src, stack_src),
                        canReturnBlk(stack, stack_src, blk, id_jump).

// Getting guards
noMsgSenderLocal(id, stack) :- transferArgument(id_return, id_src, idx),
                               argument(id, blk, idx),
                               return(id_return, blk_src),
                               jump(id_jump, _, blk_fn, blk),
                               blockFollows(blk_src, blk_fn),
                               (lastStmt(id_last, blk_src),
                                !selfdestruct(id_last, _)
                                ;
                                !notEmptyBlock(blk_src)),
                               noMsgSenderLocal(id_src, stack_src),
                               canReturnId(stack, stack_src, id, id_jump).

noMsgSenderGlobalBlkStart(field, blk, stack) :- return(_, blk_src),
                                                jump(id_jump, _, blk_fn, blk),
                                                blockFollows(blk_src, blk_fn),
                                                (lastStmt(id_last, blk_src),
                                                 !selfdestruct(id_last, _)
                                                 ;
                                                 !notEmptyBlock(blk_src)),
                                                noMsgSenderGlobalBlkEnd(field, blk_src, stack_src),
                                                canReturnBlk(stack, stack_src, blk, id_jump).

// Getting local taints
taintedLocal(id, blk, src, stack) :- transferArgument(id_return, id_src, idx),
                                     argument(id, blk, idx),
                                     return(id_return, blk_src),
                                     jump(id_jump, _, blk_fn, blk),
                                     blockFollows(blk_src, blk_fn),
                                     (lastStmt(id_last, blk_src),
                                      !selfdestruct(id_last, _)
                                      ;
                                      !notEmptyBlock(blk_src)),
                                     taintedLocal(id_src, blk_src, src, stack_src),
                                     canReturnBlk(stack, stack_src, blk, id_jump).

taintedGlobalBlkStart(field, blk, src, stack) :- return(_, blk_src),
                                                 jump(id_jump, _, blk_fn, blk),
                                                 blockFollows(blk_src, blk_fn),
                                                 (lastStmt(id_last, blk_src),
                                                  !selfdestruct(id_last, _)
                                                  ;
                                                  !notEmptyBlock(blk_src)),
                                                 taintedGlobalBlkEnd(field, blk_src, src, stack_src),
                                                 canReturnBlk(stack, stack_src, blk, id_jump).

#endif
