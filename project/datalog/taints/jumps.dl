#ifndef FUNC_CALL
#define FUNC_CALL

#include "../declarations.dl"

// For reducing code duplication
canJump(stack, tail, id_jump) :- (stack = [id_jump, tail]
                                  ;
                                  stack = [STACK_OVERFLOW, tail]
                                  ;
                                  tail = stack,
                                  stack = [STACK_OVERFLOW, tail_prev]),
                                 validStack(stack),
                                 jump(id_jump, _, _, _).

// Keep the argument taint across calls
argTaint(blk, stack) :- jump(id_jump, blk_src, blk, _),
                        argTaint(blk_src, tail),
                        canJump(stack, tail, id_jump).

// Taints for function args, msg.sender, msg.value
taintedLocal(id, blk, src, stack) :- jump(id_jump, blk_src, blk, _),
                                     (transferArgument(id_jump, id_src, idx),
                                      argument(id, blk, idx)
                                      ;
                                      msgSender(id),
                                      msgSender(id_src)
                                      ;
                                      msgValue(id),
                                      msgValue(id_src)),
                                     taintedLocal(id_src, blk_src, src, tail),
                                     canJump(stack, tail, id_jump).

// Taints for global vars always match the taint source
taintedGlobalBlkStart(field, blk, src, stack) :- jump(id_jump, blk_src, blk, _),
                                                 taintedGlobalBlkEnd(field, blk_src, src, tail),
                                                 canJump(stack, tail, id_jump).

// Pass around msg.sender presence
noMsgSenderLocal(id, stack) :- argument(id, blk_fn, idx),
                               jump(id_jump, _, blk_fn, _),
                               transferArgument(id_jump, id_src, idx),
                               noMsgSenderLocal(id_src, tail),
                               canJump(stack, tail, id_jump).
noMsgSenderGlobalBlkStart(field, blk, stack) :- jump(id_jump, blk_src, blk, _),
                                                noMsgSenderGlobalBlkEnd(field, blk_src, tail),
                                                canJump(stack, tail, id_jump).

#endif
